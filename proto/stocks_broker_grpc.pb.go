// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: stocks_broker.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StocksBrokerClient is the client API for StocksBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StocksBrokerClient interface {
	SetLimitOrder(ctx context.Context, in *LimitOrder, opts ...grpc.CallOption) (*OrderStatus, error)
}

type stocksBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewStocksBrokerClient(cc grpc.ClientConnInterface) StocksBrokerClient {
	return &stocksBrokerClient{cc}
}

func (c *stocksBrokerClient) SetLimitOrder(ctx context.Context, in *LimitOrder, opts ...grpc.CallOption) (*OrderStatus, error) {
	out := new(OrderStatus)
	err := c.cc.Invoke(ctx, "/stocks_broker.StocksBroker/SetLimitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StocksBrokerServer is the server API for StocksBroker service.
// All implementations must embed UnimplementedStocksBrokerServer
// for forward compatibility
type StocksBrokerServer interface {
	SetLimitOrder(context.Context, *LimitOrder) (*OrderStatus, error)
	mustEmbedUnimplementedStocksBrokerServer()
}

// UnimplementedStocksBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedStocksBrokerServer struct {
}

func (UnimplementedStocksBrokerServer) SetLimitOrder(context.Context, *LimitOrder) (*OrderStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLimitOrder not implemented")
}
func (UnimplementedStocksBrokerServer) mustEmbedUnimplementedStocksBrokerServer() {}

// UnsafeStocksBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StocksBrokerServer will
// result in compilation errors.
type UnsafeStocksBrokerServer interface {
	mustEmbedUnimplementedStocksBrokerServer()
}

func RegisterStocksBrokerServer(s grpc.ServiceRegistrar, srv StocksBrokerServer) {
	s.RegisterService(&StocksBroker_ServiceDesc, srv)
}

func _StocksBroker_SetLimitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StocksBrokerServer).SetLimitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocks_broker.StocksBroker/SetLimitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StocksBrokerServer).SetLimitOrder(ctx, req.(*LimitOrder))
	}
	return interceptor(ctx, in, info, handler)
}

// StocksBroker_ServiceDesc is the grpc.ServiceDesc for StocksBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StocksBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stocks_broker.StocksBroker",
	HandlerType: (*StocksBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLimitOrder",
			Handler:    _StocksBroker_SetLimitOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stocks_broker.proto",
}
